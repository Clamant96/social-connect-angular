{"ast":null,"code":"import { Usuario } from './../model/Usuario';\nimport { environment } from './../../environments/environment.prod';\nimport { Mensagem } from './../model/Mensagem';\nimport { Postagem } from '../model/Postagem';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./../service/postagem.service\";\nimport * as i2 from \"./../service/mensagem.service\";\nimport * as i3 from \"./../service/usuario.service\";\nimport * as i4 from \"./../service/auth.service\";\nimport * as i5 from \"./../service/story.service\";\nimport * as i6 from \"@angular/router\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"../util/post/post.component\";\nimport * as i9 from \"../util/sugestoes/sugestoes.component\";\nimport * as i10 from \"../util/story/story.component\";\nimport * as i11 from \"ngx-order-pipe\";\n\nfunction IndexComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵelement(1, \"app-post\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const postagem_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"postagem\", postagem_r1);\n  }\n}\n\nexport let IndexComponent = /*#__PURE__*/(() => {\n  class IndexComponent {\n    constructor(postagemService, mensagemService, usuarioService, authService, storyService, router) {\n      this.postagemService = postagemService;\n      this.mensagemService = mensagemService;\n      this.usuarioService = usuarioService;\n      this.authService = authService;\n      this.storyService = storyService;\n      this.router = router;\n      this.mensagem = new Mensagem();\n      this.minhasPostagens = new Postagem();\n      this.usuarioPostagem = new Usuario();\n      this.usuarioStorys = new Usuario();\n      this.usernameMensagem = environment.username;\n      this.username = environment.username;\n      this.nome = environment.nome;\n      this.img = environment.img;\n      this.idUsuarioLogado = environment.id;\n      this.memoriaDesabilitado = 'none';\n      this.memoriaAbilitado = 'none';\n      this.key = 'data';\n      this.reverse = true;\n      this.url = `${environment.service}${environment.port}`;\n    }\n\n    ngOnInit() {\n      window.scroll(0, 0);\n\n      if (localStorage.getItem('token') == null) {\n        this.router.navigate(['/login']);\n      }\n\n      if (this.idUsuarioLogado > 0) {\n        this.findAllStorysSeguidores(this.idUsuarioLogado);\n        this.findAllPostagensSeguidores(this.idUsuarioLogado);\n      } else {\n        this.router.navigate(['/login']);\n      }\n    }\n\n    validaData(dataStory) {\n      const dataAtual = new Date().toLocaleDateString();\n      const conversaoDataStory = new Date(dataStory).toLocaleDateString('pt-BR');\n\n      if (conversaoDataStory == dataAtual) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    carregaImagem(username, img) {\n      if (username == null || username == '' || img == null || img == '') {\n        return '';\n      }\n\n      if (img.includes(\"person_perfil_vazio\")) {\n        return img;\n      } // BASE 64\n\n\n      username = this.encodeBytesToBase64(username);\n      img = this.encodeBytesToBase64(img);\n      return `${this.url}/image/carregar/${username}/${img}`;\n    }\n\n    encodeBytesToBase64(bytes) {\n      const binString = btoa(bytes);\n      return btoa(binString);\n    }\n\n    carregaImagemStory(img) {\n      if (img == null || img == '') {\n        return '';\n      }\n\n      if (img.includes(\"person_perfil_vazio\")) {\n        return img;\n      }\n\n      return `${this.url}/image/carregar/${img}`;\n    }\n\n    findAllPostagensSeguidores(id) {\n      this.postagemService.getAllPostagensSeguidores(id).subscribe(resp => {\n        this.listaDePostagens = resp;\n      });\n    }\n\n    findByIdPostagem(id) {\n      this.usuarioPostagem = new Usuario();\n      this.postagemService.getByIdPostagemUsuario(id).subscribe(resp => {\n        this.minhasPostagens = resp;\n        this.usuarioService.getByIdUsuario(resp.usuario.id).subscribe(resp => {\n          this.usuarioPostagem = resp;\n        }, erro => {\n          if (erro.status == 500 || erro.status == 400) {\n            alert('Ocorreu um erro ao tentar vizualizar a postagem!');\n          }\n        });\n      }, erro => {\n        if (erro.status == 500 || erro.status == 400) {\n          alert('Ocorreu um erro ao tentar abrir a postagem!');\n        }\n      });\n    }\n\n    findAllStorysSeguidores(id) {\n      this.storyService.getAllStorysSeguidores(id).subscribe(resp => {\n        this.listaDeStorys = resp;\n        /*\r\n          var resultProductData = product_data.filter(a => {\r\n            var date = new Date(a.ProductHits);\r\n            return (date >= startDate && date <= endDate);\r\n          });\r\n          console.log(resultProductData)\r\n        */\n\n        try {\n          /* AGRUPA OS ITENS REPETIDOS DENTRO DO ARRAY */\n          this.listaDeStorys = resp.filter((item, index, self) => index === self.findIndex(t => t.usuario.nome === item.usuario.nome));\n        } catch (erro) {//console.log('OCORREU UM ERRO AO AGRUPAR O ARRAY);\n        }\n      });\n    }\n\n    findByIdUsuario(id) {\n      var _a;\n\n      (_a = window.document.querySelector('#gerenciar-modal')) === null || _a === void 0 ? void 0 : _a.setAttribute('style', 'display: block;');\n      this.usuarioService.getByIdUsuario(id).subscribe(resp => {\n        this.usuarioStorys = resp; // console.log(this.usuarioStorys);\n      }, erro => {\n        if (erro.status == 500 || erro.status == 400) {\n          alert('OCORREU UM ERRO AO TENTAR ABRIR O STORYS!!');\n        }\n      });\n    }\n\n    postMensagemPostagem(idPostagem) {\n      this.mensagem.username = environment.username;\n      /* ACESSA O OBJETO TEMA(ID), E DENTRO DELE INSERE O DADO VINDO DA OPCAO ESCOLHIDA PELO USUARIO */\n\n      this.minhasPostagens.id = idPostagem;\n      /* INSERE O ID DE TEMA DENTRO DE POSTAGEM(TEMA) */\n\n      this.mensagem.postagem = this.minhasPostagens;\n      this.mensagemService.postMensagem(this.mensagem).subscribe(resp => {\n        this.mensagem = resp; // this.findAllPostagensSeguidores(this.idUsuarioLogado);\n\n        this.listaDePostagens.map(item => {\n          if (item.id == idPostagem) {\n            this.postagemService.getByIdPostagemUsuario(idPostagem).subscribe(resp => {\n              item.mensagens = resp.mensagens; // console.log(item.likePostagem);\n            });\n          }\n        });\n        this.mensagem = new Mensagem();\n      }, erro => {\n        if (erro.status == 500) {\n          alert('O correu um erro ao tentar realizar o comentarios!');\n        }\n      });\n    }\n\n    likePostagem(idUsuario, idPostagem) {\n      this.postagemService.likePostagem(idUsuario, idPostagem).subscribe(() => {\n        // this.findAllPostagensSeguidores(this.idUsuarioLogado);\n        this.listaDePostagens.map(item => {\n          if (item.id == idPostagem) {\n            this.postagemService.getByIdPostagemUsuario(idPostagem).subscribe(resp => {\n              item.likePostagem = resp.likePostagem; // console.log(item.likePostagem);\n            });\n          }\n        });\n      });\n    }\n\n    logoutUsuario() {\n      this.authService.logout();\n    }\n\n    seguirUsuario(idSeguindo, idSeguidor) {\n      this.usuarioService.seguirUsuario(idSeguindo, idSeguidor).subscribe(() => {}, erro => {\n        if (erro.status == 500 || erro.status == 400) {\n          alert('Ocorreu um erro ao tentar seguir o usuario!!');\n        }\n      });\n      setTimeout(() => {\n        this.findAllStorysSeguidores(this.idUsuarioLogado);\n        this.findAllPostagensSeguidores(this.idUsuarioLogado);\n      }, 1000);\n    }\n\n    disponibilizaEdicaoPerfil(id, idLoop) {\n      let trava = false;\n\n      if (id == idLoop) {\n        trava = true;\n      } else {\n        trava = false;\n      }\n\n      return trava;\n    }\n\n    ajustaLike(postagem, idUsuario) {\n      let retorno = \"\";\n      postagem.likePostagem.map(p => {\n        if (p.id == idUsuario) {\n          retorno = \"preenche-like\";\n        }\n      });\n      return retorno;\n    }\n\n    renderizaBotao(postagem, idUsuario) {\n      let retorno = false;\n      postagem.likePostagem.map(p => {\n        if (p.id == idUsuario) {\n          retorno = true;\n        }\n      });\n      return retorno;\n    }\n\n    pushAtualizaVisualizacaoUsuario(status) {\n      console.log('status novo seguindo: ', status);\n\n      if (status) {\n        setTimeout(() => {\n          console.log('A visualizacao do usuario sera recarregada!');\n          this.findAllStorysSeguidores(this.idUsuarioLogado);\n          this.findAllPostagensSeguidores(this.idUsuarioLogado);\n        }, 1000);\n      }\n    }\n\n  }\n\n  IndexComponent.ɵfac = function IndexComponent_Factory(t) {\n    return new (t || IndexComponent)(i0.ɵɵdirectiveInject(i1.PostagemService), i0.ɵɵdirectiveInject(i2.MensagemService), i0.ɵɵdirectiveInject(i3.UsuarioService), i0.ɵɵdirectiveInject(i4.AuthService), i0.ɵɵdirectiveInject(i5.StoryService), i0.ɵɵdirectiveInject(i6.Router));\n  };\n\n  IndexComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: IndexComponent,\n    selectors: [[\"app-index\"]],\n    decls: 7,\n    vars: 6,\n    consts: [[1, \"feed-noticias\"], [1, \"header\", 3, \"listaDeStorys\"], [1, \"feed\"], [\"class\", \"postagem-usuario\", 4, \"ngFor\", \"ngForOf\"], [1, \"bloco-sugestoes-perfis\", 3, \"atualizaVisualizacaoUsuario\"], [1, \"postagem-usuario\"], [3, \"postagem\"]],\n    template: function IndexComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"section\")(1, \"div\", 0);\n        i0.ɵɵelement(2, \"app-story-util\", 1);\n        i0.ɵɵelementStart(3, \"div\", 2);\n        i0.ɵɵtemplate(4, IndexComponent_div_4_Template, 2, 1, \"div\", 3);\n        i0.ɵɵpipe(5, \"orderBy\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"app-sugestoes\", 4);\n        i0.ɵɵlistener(\"atualizaVisualizacaoUsuario\", function IndexComponent_Template_app_sugestoes_atualizaVisualizacaoUsuario_6_listener($event) {\n          return ctx.pushAtualizaVisualizacaoUsuario($event);\n        });\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"listaDeStorys\", ctx.listaDeStorys);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind3(5, 2, ctx.listaDePostagens, ctx.key, ctx.reverse));\n      }\n    },\n    dependencies: [i7.NgForOf, i8.PostComponent, i9.SugestoesComponent, i10.StoryUtilComponent, i11.OrderPipe],\n    styles: [\"section[_ngcontent-%COMP%]{width:100%;height:auto;padding:2%;display:flex;align-items:flex-start;justify-content:center;background-color:var(--background-page)}section[_ngcontent-%COMP%]   .feed-noticias[_ngcontent-%COMP%]{width:40%;height:auto;display:flex;align-items:center;flex-direction:column;justify-content:center;margin:0% 1%}section[_ngcontent-%COMP%]   .feed-noticias[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]{background-color:var(--background-section);width:100%;height:auto;margin-bottom:2%;padding:2%;border-radius:8px;border:1px solid var(--border-gray);display:flex;align-items:center;justify-content:flex-start;overflow-y:scroll}section[_ngcontent-%COMP%]   .feed-noticias[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]::-webkit-scrollbar{display:none}section[_ngcontent-%COMP%]   .feed-noticias[_ngcontent-%COMP%]   .feed[_ngcontent-%COMP%]{width:100%;height:auto}section[_ngcontent-%COMP%]   .feed-noticias[_ngcontent-%COMP%]   .feed[_ngcontent-%COMP%]   .postagem-usuario[_ngcontent-%COMP%]{width:100%;height:auto;margin-top:2.5%;margin-bottom:2.5%;background-color:var(--background-section);border:1px solid var(--border-gray);border-radius:8px}section[_ngcontent-%COMP%]   .feed-noticias[_ngcontent-%COMP%]   .feed[_ngcontent-%COMP%]   .postagem-usuario[_ngcontent-%COMP%]   .img-postagem[_ngcontent-%COMP%]{width:100%;height:auto}section[_ngcontent-%COMP%]   .feed-noticias[_ngcontent-%COMP%]   .feed[_ngcontent-%COMP%]   .postagem-usuario[_ngcontent-%COMP%]   .img-postagem[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{width:100%;height:auto}section[_ngcontent-%COMP%]   .bloco-sugestoes-perfis[_ngcontent-%COMP%]{width:25%;height:auto}@media (max-width: 760px){section[_ngcontent-%COMP%]{width:100%;height:auto;padding:0%;display:flex;align-items:flex-start;justify-content:center;background-color:var(--background-page)}section[_ngcontent-%COMP%]   .feed-noticias[_ngcontent-%COMP%]{width:100%;height:auto;display:flex;align-items:center;flex-direction:column;justify-content:center;margin:0%}section[_ngcontent-%COMP%]   .feed-noticias[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]{background-color:var(--background-section);width:100%;height:auto;margin-bottom:0%;padding:0%;border-radius:0;border:0px solid var(--border-gray);display:flex;align-items:center;justify-content:flex-start;overflow-y:scroll}section[_ngcontent-%COMP%]   .feed-noticias[_ngcontent-%COMP%]   .header[_ngcontent-%COMP%]::-webkit-scrollbar{display:none}section[_ngcontent-%COMP%]   .feed-noticias[_ngcontent-%COMP%]   .feed[_ngcontent-%COMP%]{width:100%;height:auto}section[_ngcontent-%COMP%]   .feed-noticias[_ngcontent-%COMP%]   .feed[_ngcontent-%COMP%]   .postagem-usuario[_ngcontent-%COMP%]{width:100%;height:auto;margin-top:2.5%;margin-bottom:2.5%;background-color:var(--background-section);border:0px solid var(--border-gray);border-radius:0}section[_ngcontent-%COMP%]   .bloco-sugestoes-perfis[_ngcontent-%COMP%]{width:25%;height:auto;display:none}}\"]\n  });\n  return IndexComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}