{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment.prod';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let PostagemService = /*#__PURE__*/(() => {\n  class PostagemService {\n    constructor(http) {\n      this.http = http;\n      this.url = environment.service + environment.port;\n      /* CRIA UM TOKEN, PARA REALIZAR A AUTENTICACAO DO ENDPOINT, POR MEIO DO METODO Authorization, PASSANDO COMO PAREMTRO O TOKEN DO USUARIO LOGADO */\n\n      this.autorizacao = {\n        headers: new HttpHeaders().set('Authorization', localStorage.getItem('token') || '') //headers: new HttpHeaders().set('Authorization', environment.token)\n\n      };\n    }\n\n    getAllByPostagensUsuarios() {\n      return this.http.get(`${this.url}/postagens`, this.autorizacao);\n    }\n\n    getAllPostagensSeguidores(id) {\n      return this.http.get(`${this.url}/usuarios/postagens-seguidores/${id}`, this.autorizacao);\n    }\n\n    getByIdPostagemUsuario(id) {\n      return this.http.get(`${this.url}/postagens/${id}`, this.autorizacao);\n    }\n\n    getAllByUsuarioPostagem(id) {\n      return this.http.get(`${this.url}/postagens/postagensUsuario/${id}`, this.autorizacao);\n    }\n\n    postPostagemUsuario(postagem) {\n      postagem.img = environment.nomeUplaodImagem;\n      return this.http.post(`${this.url}/postagens`, postagem, this.autorizacao);\n    }\n\n    putPostagemUsuario(postagem) {\n      postagem.img = environment.nomeUplaodImagem;\n      return this.http.put(`${this.url}/postagens`, postagem, this.autorizacao);\n    }\n\n    likePostagem(idPostagem, idUsuario) {\n      return this.http.put(`${this.url}/postagens/likes_usuario_postagem/likePostagem/${idPostagem}/like/${idUsuario}`, this.autorizacao);\n    }\n\n    uploadImage(image) {\n      const data = new FormData();\n      data.append('type', image.type);\n      data.append('file', image);\n      data.append('contentType', image);\n      data.append('empty', String(false));\n      data.append('name', `${environment.username}/${image.name}`);\n      data.append('originalFilename', `${environment.username}/${image.name}`);\n      data.append('size', String(image.size));\n      let nomeArquivo = String(this.getRandomInt(100000000, 999999999));\n      environment.nomeUplaodImagem = `${nomeArquivo}.${image.name.split(\".\")[1]}`;\n      return this.http.post(`${this.url}/upload/${environment.username}/nomeArquivo/${nomeArquivo}`, data);\n    }\n\n    findImage(nomeUsuario, nomeImagem) {\n      return this.http.get(`${this.url}/image/carregar/${nomeUsuario}/${nomeImagem}`);\n    }\n\n    getRandomInt(min, max) {\n      min = Math.ceil(min);\n      max = Math.floor(max);\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    deletaImagemSubstituida(nomeArquivo) {\n      return this.http.delete(`${this.url}/upload/${environment.username}/nomeArquivo/${nomeArquivo}`, this.autorizacao);\n    }\n\n  }\n\n  PostagemService.ɵfac = function PostagemService_Factory(t) {\n    return new (t || PostagemService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  PostagemService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostagemService,\n    factory: PostagemService.ɵfac,\n    providedIn: 'root'\n  });\n  return PostagemService;\n})();","map":null,"metadata":{},"sourceType":"module"}